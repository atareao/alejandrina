/*
 * JDayCell.java
 *
 * Created on 21 de agosto de 2007, 19:30
 */

package es.atareao.alejandria.gui;

import java.awt.Color;
import java.util.Date;
import javax.swing.BorderFactory;
import es.atareao.alejandria.lib.DateUtils;
import es.atareao.alejandria.lib.Suceso;

/**
 *
 * @author  Propietario
 */
public class JDayCell extends javax.swing.JPanel {
    private final static Color BG_OTRO=new Color(231,238,236);
    private final static Color BG_NORMAL=Color.WHITE;
    private final static Color BG_SELECCIONADO=new Color(255,231,156,255);
    private final static Color BG_FESTIVO=new Color(255,249,231,255);
    //
    private final static Color LB_OTRO=new Color(63,145,192,255);
    private final static Color LB_NORMAL=new Color(63,145,192,255);
    private final static Color LB_SELECCIONADO=new Color(63,145,192,255);
    private final static Color LB_HOY=Color.RED;
    /** Creates new form JDayCell */
    public JDayCell() {
        initComponents();
        this.setSelected(false);
        this.setListModel(new SortedListModel());
        this.jListEvents.setCellRenderer(new DefaultEventCellRenderer());
    }
    private void firePropertySelectedEvent(){

        if(_selectedEvent==this.jListEvents.getSelectedValue()){
            _selectedEvent=null;
        }
        Object oldEvent=_selectedEvent;
        _selectedEvent=this.jListEvents.getSelectedValue();
        this.firePropertyChange("selectedEvent",oldEvent,_selectedEvent);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Generado  ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelDay = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListEvents = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(29, 122, 181), 1, true));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabelDay.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDay.setFont(new java.awt.Font("Tahoma", 1, 10));
        jLabelDay.setText(" 1");
        jLabelDay.setOpaque(true);
        add(jLabelDay, java.awt.BorderLayout.NORTH);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);
        jListEvents.setFont(new java.awt.Font("Tahoma", 0, 9));
        jListEvents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListEvents.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jListEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListEventsMousePressed(evt);
            }
        });
        jListEvents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListEventsValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jListEvents);
        jListEvents.getAccessibleContext().setAccessibleParent(this);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void jListEventsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListEventsValueChanged

// TODO: Agrege su codigo aqui:
        this.firePropertySelectedEvent();
        if(_selectedEvent!=null){
            Suceso suceso=(Suceso)_selectedEvent;
            String toolTipText=suceso.getResumen();
            this.setToolTipText(toolTipText);
            this.jLabelDay.setToolTipText(toolTipText);
            this.jListEvents.setToolTipText(toolTipText);
        }
    }//GEN-LAST:event_jListEventsValueChanged

    private void jListEventsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEventsMousePressed
// TODO: Agrege su codigo aqui:
        this.setSelected(true);
    }//GEN-LAST:event_jListEventsMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
// TODO: Agrege su codigo aqui:
        this.setSelected(true);
    }//GEN-LAST:event_formMouseClicked
    
    private void colorea(){
        if(this.isOtroMes()){
            this.setColorDeFondo(this.getColorOtro());
            /*
            if(DateUtils.areEqualsDates(DateUtils.Ahora(),this.getFecha())){
                this.jLabelDay.setForeground(LB_HOY);
            }else{
                this.jLabelDay.setForeground(LB_OTRO);
            }
             */
            this.setBorder(BorderFactory.createLineBorder(new Color(63,145,192,255),1));
        }else{
            if(this.isSelected()){
                this.setColorDeFondo(this.getColorSeleccionado());
                /*
                if(DateUtils.areEqualsDates(DateUtils.Ahora(),this.getFecha())){
                    this.jLabelDay.setForeground(LB_HOY);
                }else{
                    this.jLabelDay.setForeground(LB_SELECCIONADO);
                }
                 */
                this.setBorder(BorderFactory.createLineBorder(new Color(63,145,192,255),2));
            }else{
                if((this.getFecha()!=null)&&(DateUtils.dayOfWeek(this.getFecha())>4)){
                    this.setColorDeFondo(this.getColorFestivo());
                }else{
                    this.setColorDeFondo(this.getColorNormal());
                }
                if(DateUtils.areEqualsDates(DateUtils.Ahora(),this.getFecha())){
                    this.jLabelDay.setForeground(LB_HOY);
                }else{
                    this.jLabelDay.setForeground(LB_NORMAL);
                }
                this.setBorder(BorderFactory.createLineBorder(new Color(63,145,192,255),1));
            }
        }            
    }
    
    public boolean add(Suceso suceso){
        if(this.contains(suceso)==false){
            this.getListModel().add(suceso);
            return true;
        }
        return false;
    }
    public boolean contains(Suceso suceso){
        return this.getListModel().contains(suceso);
    }
    public boolean remove(Suceso suceso){
        if(this.contains(suceso)==true){
            this.getListModel().removeElement(suceso);
            return true;
        }
        return false;
    }
    // Declaración de varibales -no modificar//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelDay;
    private javax.swing.JList jListEvents;
    private javax.swing.JScrollPane jScrollPane1;
    // Fin de declaración de variables//GEN-END:variables
    private boolean _selected;
    private Date _fecha;
    private boolean _otroMes;
    private Color _colorOtro=BG_OTRO;
    private Color _colorNormal=BG_NORMAL;
    private Color _colorSeleccionado=BG_SELECCIONADO;
    private Color _colorFestivo=BG_FESTIVO;
    private SortedListModel _listModel;
    private Object _selectedEvent;
    
    public boolean isSelected() {
        return _selected;
    }

    public void setSelected(boolean selected) {
        if(selected){
            this.firePropertyChange("selectedDay",this._selected,selected);
            this.firePropertyChange("selectedDate",null,this.getFecha());
            //this.firePropertySelectedEvent();
        }else{
            this.setSelectedEvent(null);
        }
        //this.jListEvents.setSelectedIndex(-1);
        this._selected = selected;
        this.colorea();
    }

    public Date getFecha() {
        return _fecha;
    }

    public void setFecha(Date fecha) {
        this._fecha = fecha;
        this.getListModel().clear();
        if((DateUtils.dayOfMonth(fecha)==1)||(DateUtils.dayOfMonth(fecha)==DateUtils.dayOfMonth(DateUtils.lastDayOfMonth(fecha)))){
            this.jLabelDay.setText("  "+Integer.toString(DateUtils.dayOfMonth(fecha))+" "+DateUtils.monthOfYearString(fecha));
        }else{
            this.jLabelDay.setText("  "+Integer.toString(DateUtils.dayOfMonth(fecha)));
        }
    }

    public boolean isOtroMes() {
        return _otroMes;
    }

    public void setOtroMes(boolean otroMes) {
        this._otroMes = otroMes;
        this.colorea();
    }
    public void setColorDeFondo(Color color){
        this.setBackground(color);
        this.jLabelDay.setBackground(color);
        this.jScrollPane1.setBackground(color);
        this.jListEvents.setBackground(color);
        this.jListEvents.setSelectionBackground(color);
        
    }

    public Color getColorOtro() {
        return _colorOtro;
    }

    public void setColorOtro(Color colorOtro) {
        this._colorOtro = colorOtro;
    }

    public Color getColorNormal() {
        return _colorNormal;
    }

    public void setColorNormal(Color colorNormal) {
        this._colorNormal = colorNormal;
    }

    public Color getColorSeleccionado() {
        return _colorSeleccionado;
    }

    public void setColorSeleccionado(Color colorSeleccionado) {
        this._colorSeleccionado = colorSeleccionado;
    }

    public SortedListModel getListModel() {
        return _listModel;
    }

    public void setListModel(SortedListModel listModel) {
        this._listModel = listModel;
        this.jListEvents.setModel(listModel);
    }
    public Object getSelectedEvent(){
        return this._selectedEvent;//this.jListEvents.getSelectedValue();
    }
    public void setSelectedEvent(Object event){
        if(event!=null){
            int seleccionado=this.getListModel().getElementIndex(event);
            if(seleccionado!=-1){
                this.setSelected(true);
                this.jListEvents.setSelectedValue(this.jListEvents.getModel().getElementAt(seleccionado),true);
            }
        }else{
            this.jListEvents.setSelectedIndex(-1);
        }
        this._selectedEvent=event;
    }

    public Color getColorFestivo() {
        return _colorFestivo;
    }

    public void setColorFestivo(Color colorFestivo) {
        this._colorFestivo = colorFestivo;
    }
}
